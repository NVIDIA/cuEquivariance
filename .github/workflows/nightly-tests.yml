name: Nightly Full Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to check for recent commits
    - name: Check for recent changes
      id: check
      run: |
        # Check if there are any commits in the last 24 hours
        RECENT_COMMITS=$(git log --since="24 hours ago" --oneline | wc -l)
        echo "Recent commits in last 24h: $RECENT_COMMITS"
        
        if [ "$RECENT_COMMITS" -gt 0 ]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "Found recent changes, will run full tests"
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "No recent changes, skipping tests"
        fi

  cuequivariance-full:
    needs: check-changes
    if: needs.check-changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade uv
        python -m uv pip install pytest
        python -m uv pip install -e ./cuequivariance 
    - name: Test with pytest (including slow tests)
      run: |
        pytest --doctest-modules -x cuequivariance
    - name: Downgrade numpy
      run: |
        python -m uv pip install -U "numpy==1.26.*"
    - name: Test with pytest (numpy 1.26, including slow tests)
      run: |
        pytest --doctest-modules -x cuequivariance

  cuequivariance-jax-full:
    needs: check-changes
    if: needs.check-changes.outputs.should_run == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: "ubuntu-latest"
            python-version: "3.10"
          - runner: "self-hosted"
            python-version: "3.12"

    runs-on: ${{ matrix.runner }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade uv
        python -m uv pip install -U pytest "jax[cuda12]"
        python -m uv pip install nvidia-cusolver-cu12==11.7.3.90
        python -m uv pip uninstall cuequivariance cuequivariance_jax cuequivariance_torch
        python -m uv pip install -e ./cuequivariance 
        python -m uv pip install -e ./cuequivariance_jax 
        python -c "import cuequivariance; print('cue', cuequivariance.__version__)"
        python -c "import cuequivariance_jax; print('cuex', cuequivariance_jax.__version__)"
    - name: Test with pytest (including slow tests)
      run: |
        XLA_PYTHON_CLIENT_PREALLOCATE=false pytest --doctest-modules -x cuequivariance_jax

  cuequivariance-torch-full:
    needs: check-changes
    if: needs.check-changes.outputs.should_run == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: "ubuntu-latest"
            python-version: "3.10"
          - runner: "self-hosted"
            python-version: "3.12"

    runs-on: ${{ matrix.runner }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade uv
        python -m uv pip install -U pytest torch e3nn
        python -m uv pip uninstall cuequivariance cuequivariance_jax cuequivariance_torch
        python -m uv pip install -e ./cuequivariance 
        python -m uv pip install -e ./cuequivariance_torch 
        python -c "import cuequivariance; print('cue', cuequivariance.__version__)"
        python -c "import cuequivariance_torch; print('cuet', cuequivariance_torch.__version__)"
    - name: Test with pytest (including slow tests)
      run: |
        pytest --doctest-modules -x cuequivariance_torch

  notify-on-failure:
    needs: [check-changes, cuequivariance-full, cuequivariance-jax-full, cuequivariance-torch-full]
    if: always() && needs.check-changes.outputs.should_run == 'true' && (needs.cuequivariance-full.result == 'failure' || needs.cuequivariance-jax-full.result == 'failure' || needs.cuequivariance-torch-full.result == 'failure')
    runs-on: ubuntu-latest
    steps:
    - name: Create Issue on Failure
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Nightly Test Failure Report
          
          **Date:** ${new Date().toISOString()}
          **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### Failed Jobs:
          ${needs['cuequivariance-full'].result === 'failure' ? '‚ùå cuequivariance-full\n' : ''}${needs['cuequivariance-jax-full'].result === 'failure' ? '‚ùå cuequivariance-jax-full\n' : ''}${needs['cuequivariance-torch-full'].result === 'failure' ? '‚ùå cuequivariance-torch-full\n' : ''}
          
          Please investigate and fix the failing tests.
          
          ---
          *This issue was automatically created by the nightly test workflow.*`;
          
          // Check if there's already an open issue for nightly test failures
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'nightly-test-failure'
          });
          
          if (issues.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['nightly-test-failure', 'bug']
            });
          } else {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: `## New Failure Report\n\n${body}`
            });
          } 

  close-failure-issues:
    needs: [check-changes, cuequivariance-full, cuequivariance-jax-full, cuequivariance-torch-full]
    if: always() && needs.check-changes.outputs.should_run == 'true' && needs.cuequivariance-full.result == 'success' && needs.cuequivariance-jax-full.result == 'success' && needs.cuequivariance-torch-full.result == 'success'
    runs-on: ubuntu-latest
    steps:
    - name: Close Failure Issues
      uses: actions/github-script@v7
      with:
        script: |
          // Find open nightly test failure issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'nightly-test-failure'
          });
          
          // Close them with a success comment
          for (const issue of issues) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `‚úÖ **Tests are now passing!**\n\nNightly tests passed on ${new Date().toISOString().split('T')[0]}.\nWorkflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nClosing this issue automatically.`
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
          } 